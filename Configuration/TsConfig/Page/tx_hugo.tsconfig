tx_hugo {
    enable = 1
    sys_language_overlay = 1
    writer {
        class = SourceBroker\Hugo\Writer\YamlWriter
        path {
            content = hugo/content
            data = hugo/data
            media = hugo/content/-media
        }
    }
    content {
        contentToClass {
            fallbackContentElementClass = SourceBroker\Hugo\ContentElement\FallbackContentElement
            mapper {
                10 {
                    ctype = Dce.*
                    class = SourceBroker\Hugo\ContentElement\DceContentElement
                }
                20 {
                    ctype = (.*)
                    class = SourceBroker\Hugo\ContentElement\{1}ContentElement
                }
            }
        }
        indexer {
            commonFields {
                class =
                fieldMapper {
                    id {
                        from = uid
                    }
                    type {
                        from = CType
                    }
                    draft {
                        from = hidden
                    }
                    publishDate {
                        from = starttime
                        transforms {
                            10 {
                                type = convertDate
                            }
                        }
                    }
                    expireDate {
                        from = endtime
                        transforms {
                            10 {
                                type = convertDate
                            }
                        }
                    }
                    sectionClasses {
                        from = space_before_class,space_after_class
                        transforms {
                            10 {
                                type = commaToSpace
                            }
                            20 {
                                type = removeDuplicateClasses
                            }
                        }
                    }
                    sectionTitle {
                        from = header
                    }
                    sectionTitleSub {
                        from = subheader
                    }
                    sectionTitleLayout {
                        from = header_layout
                        transforms {
                            10 {
                                type = toInteger
                            }
                        }
                    }
                }
            }
        }
        link {
            # equivalent to config.absRefPrefix
            absRefPrefix = /
            # equivalent to config.fileTarget
            fileTarget =
            # equivalent to config.extTarget
            extTarget = _top
            # equivalent to config.spamProtectEmailAddresses
            spamProtectEmailAddresses = 0
            # equivalent to config.spamProtectEmailAddresses_atSubst
            spamProtectEmailAddresses_atSubst = (at)
            # equivalent to config.spamProtectEmailAddresses_lastDotSubst
            spamProtectEmailAddresses_lastDotSubst = (dot)
        }
    }


    hugo {
        path {
            binary = hugo
        }
        // Build command. A marker {PATH_site} can be used
        // Example -s{PATH_site}typo3conf/ext/myext/Resources/Private/Clickdummy/site/ -d{PATH_site}/dist
        command =
    }
}